package javaSeed.utils;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

import org.apache.poi.hssf.util.CellRangeAddressList;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DataValidation;
import org.apache.poi.ss.usermodel.DataValidationConstraint;
import org.apache.poi.ss.usermodel.DataValidationHelper;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFDataValidationHelper;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

@SuppressWarnings("deprecation")
public class TestClassMethodsToExcel {
	
	private static String ClassNames[];;
	
	@SuppressWarnings({ "unused", "resource", "deprecation" })
	public static void WriteClassMethod (String ExcelPath, String SheetName) throws IOException{
		
		
		List<Class<?>> classes = ClassFinder.find("javaSeed.testScripts");
		//Iterator Itr = classes.iterator();
		ClassNames = new String[classes.size()];
		for (int i=0;i<classes.size();i++){
			ClassNames[i]=classes.get(i).getName();
		}
		
		DataValidation dataValidation = null;
		DataValidationConstraint constraint = null;
		DataValidationHelper validationHelper = null;

		 XSSFWorkbook wb = new XSSFWorkbook();
		 XSSFSheet sheet1=(XSSFSheet) wb.createSheet("sheet1");

         // Declaring XSSFRow objects
         XSSFRow NewRow;
         XSSFCell NewCell;

         XSSFRow OldRow;
         XSSFCell OldCell;
         
		    validationHelper=new XSSFDataValidationHelper(sheet1);
		    CellRangeAddressList addressList = new  CellRangeAddressList(0,5,0,0);
		    constraint =validationHelper.createExplicitListConstraint(ClassNames);
		    dataValidation = validationHelper.createValidation(constraint, addressList);
		    dataValidation.setSuppressDropDownArrow(true);      
		    sheet1.addValidationData(dataValidation);

		    FileOutputStream fileOut = new FileOutputStream(ExcelPath+"vineet.xlsx");
		    
		    NewRow = sheet1.getRow(1);
		    if (NewRow == null) {
		    	   // First cell in the row, create
		    	NewRow = sheet1.createRow(1);
		    	}
		    NewCell = NewRow.getCell(2);
		    if (NewCell == null) {
		    	   // First cell in the row, create
		    	NewCell = NewRow.createCell(3, Cell.CELL_TYPE_BLANK);
		    	}
		    
            System.out.println(sheet1.getPhysicalNumberOfRows());
            System.out.println(sheet1.getRow(sheet1.getPhysicalNumberOfRows()).getPhysicalNumberOfCells());
		    
		    wb.write(fileOut);
		    //.write(fileOut);
		    fileOut.close();
		    
/*            System.out.println(sheet1.getPhysicalNumberOfRows());
            System.out.println(sheet1.getRow(sheet1.getPhysicalNumberOfRows()).getPhysicalNumberOfCells());*/
		    
/*		    OldRow = sheet1.getRow(0);
		    OldCell = OldRow.getCell(0);

		    NewCell.copyCellFrom(OldCell, null);*/
		    
		}
        
		
		//System.out.println(classes.get(0).getName());
		
		
		
        
	

}
