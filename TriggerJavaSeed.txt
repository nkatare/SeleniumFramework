package javaSeed;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import javaSeed.almUtils.ALMConnection;
import javaSeed.constants.Const;
import javaSeed.driverSheet.TriggerTestSteps;
import javaSeed.utils.ParseExcelFile;
import javaSeed.utils.SetDriver;

/* Primary Class to execute the Framework. It contains -
 * 1. Before Suite (DefinePreRequisite) - a. Define the WebDriver based on input from Environment File
 * 					b. Connecting ALM and declaring ALM Connection and Header Objects to consume further
 * 2. Data Provider (arrTestScenario) - It returns a 2-D array with the Data from Scenario Sheet
 * 3. Test (RunTestScenarios) - This is an Iterator on Data Provider (runs for all Scenarios defined in Scenario Sheet with flagged Y)
 * 4. After Suite (CloseDriver) - a. Generate the Extent Reports
 * 					b. Close the WebDriver  
 */
public class TriggerJavaSeed {
	
	@BeforeSuite
	public void DefinePreRequisite(){
		// Define the WebDriver based on input from Environment File
		Const.driver = SetDriver.SetWebDriver(Const.driver, Const.ENVIRONMENT_DATA_ARRAY[1][2]);	//??????????? Hard-Coded ????????????????
		
		// Connecting ALM and declaring ALM Connection and Header Objects to consume further 
/*        try {
			ALMConnection.AuthLogin("https://" + Const.ALM_HOST + "/qcbin",Const.ALM_DOMAIN,Const.ALM_PROJECT,Const.ALM_USERNAME,Const.ALM_PASSWORD);
		} catch (Exception e) {
			e.printStackTrace();
		}*/
	}
	
	
	@DataProvider
	public String[][] arrTestScenario(){
		
		// Consuming data from Test Scenario Sheet in to a local 2D array. Notice the data pulled was Flagged executable data
		return Const.SHTEST_SCENARIOS;
	}
	
	@SuppressWarnings("rawtypes")
	@Test (dataProvider = "arrTestScenario")
	public void RunTestScenarios(String[] Scenarios) throws ClassNotFoundException, NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException{
		
		// Taking the Iteration data in to local 1D array to consume further
		String[] arrTestScenario = Scenarios;
		// Taking HasMap of the Test Steps Sheet data in to local HashMap variable
		HashMap<Integer,String[]> LocMAP_TESTSTEP_ARRLIST = Const.MAP_TESTSTEP_ARRLIST;
		// Creating an Array-list of String array to consume Test Steps data (each row in to each Array-list String Array
		ArrayList<String[]> ArrListScenariosTestSteps = new ArrayList<String[]>(1);
		// Declaring Parse Excel File object to reach Excel Files
	    ParseExcelFile oTestCaseData = new ParseExcelFile();
	    // Declaring 2D array to consume Test Step Excel Sheet Data for each Scenario
		String arrTestCaseData[][];
		// Declaring Variables to consume Scenario Iteration Indexes
		int ScenarioIndexFrom=0,ScenarioIndexTo=0;
		
		// Initializing Iterator object for HashMap of Test Step ArrayList 
		Iterator it = LocMAP_TESTSTEP_ARRLIST.entrySet().iterator();
		// This loop is to Capture all the Test Step Rows for the Scenario in Execution
		// Loop Each Test Step Row in this Loop
	    while (it.hasNext()) {
	        Map.Entry pair = (Map.Entry)it.next();
	        // Putting Array from each row Array List to a temporary Array
	        String[] TestStepRow = (String[]) pair.getValue();
	        	// Compare the Scenario Name from Scenario in execution with Test Step Sheet Scenario Name if True...	        
		        if (arrTestScenario[0].contentEquals(TestStepRow[0])){
		        	// Add the Test Step row to the temporary Array list defined above @59.
		        	// NOTE: This Temp array will reinitialize in next
		        	ArrListScenariosTestSteps.add(TestStepRow);
		        }
	    }
	    
	    // Execution of the Test Step rows (Functions) for the Scenario in execution
	    // If Test Step sheet has functions for the Scenario in execution then run below code
	    if (ArrListScenariosTestSteps.size()>0){	    	
			
	    	// Starting Extent Report Test Execution for the Scenario in execution 
			Const.etScenarios = Const.oExtent.startTest(Scenarios[0], Scenarios[3]);
			
			// ITERATION INDEX: If the Iteration Index was defined in the Scenario sheet, run If condition and take Iteration Index to run the iteration data from Data Sheets
	    	// Getting Scenario Execution Index Defined on testScenarios Sheet
			if (arrTestScenario[2].contains("-")){
		    	String[] arrSceIndex = arrTestScenario[2].split("-");
		    	ScenarioIndexFrom = Integer.parseInt(arrSceIndex[0]);
		    	ScenarioIndexTo = Integer.parseInt(arrSceIndex[1]);
		    	// Pulling Test Case Data for the current Scenario in a 2D Array 
				arrTestCaseData = oTestCaseData.ReadExcel(Const.JAVA_SEED_DRIVERSHEET_PATH, "tc"+arrTestScenario[0]);	
				
				
				// Loop for Scenario Execution Index, 'Iteration Index' column on the testScenario Sheet 
				for (int ScenItr=ScenarioIndexFrom;ScenItr<=ScenarioIndexTo;ScenItr++){
					
					//+++++++++++++ Add Code here to verify that Test Case present in the ALM Test Set, if not, skip the test execution.
					// Using - String = ReadALMEntity.GetTestCaseInstanceID(TestSetFodlerName,TestSetName,TestCaseID). If String = "0000" Means TestCase not found.

					// Starting Extent Report Test Execution for the Test Case per Iteration
			    	Const.etTestCases = Const.oExtent.startTest(arrTestCaseData[ScenItr][0], //Test Case ID
			    			 arrTestCaseData[ScenItr][1] //Test Case Description
			    					);
			    	 
					
					// Loop Each Scenario Execution Index, Loop through each Function defined in the testSteps sheets.
				    for (int j=0;j<ArrListScenariosTestSteps.size();j++){
				    	
				    	// Setting Test Steps array from the Array List of that row running in this loop for Scenario in execution
				    	TriggerTestSteps.setArrListScenariosTestSteps(ArrListScenariosTestSteps.get(j));
				    	// Setting Test Data array from the 2D Array of that row running in this loop for Scenario in execution
				    	TriggerTestSteps.setArrTestCaseData(arrTestCaseData[ScenItr]);
				    	// ###########################################################
				    	// Executing the Function defined in Test Step
				    	TriggerTestSteps.TestStepsIterationExecution();
				    	// ###########################################################				    	
				    	
				    }
				    System.out.println(Const.etTestCases.getRunStatus());
				    // Ending Extent Report Test Execution for the Test Case per Iteration
				    Const.oExtent.endTest(Const.etTestCases);
				    // Appending Extent Report Test Execution for the Test Case per Iteration to the Test Scenario Test Run
				    Const.etScenarios.appendChild(Const.etTestCases);
				}	    	
			} 
			// ITERATION INDEX: Else if Iteration Index was not defined. This means the scenario was not supposed to run through Iteration and only one instance of data
			// which was defined in the Test Step Sheet itself
			else {
				Const.etTestCases = Const.oExtent.startTest(arrTestScenario[2], //Test Case ID
						arrTestScenario[3]); //Test Case Description
				// Loop Each Scenario Execution Index, Loop through each Function defined in the testSteps sheets.
			    for (int j=0;j<ArrListScenariosTestSteps.size();j++){
			    	
			    	TriggerTestSteps.setArrListScenariosTestSteps(ArrListScenariosTestSteps.get(j));
			    	TriggerTestSteps.setArrTestCaseData(TriggerTestSteps.getArrListScenariosTestSteps());
			    	// ###########################################################
			    	TriggerTestSteps.TestStepsSingleExecution();
			    	// ###########################################################				    	
			    	
			    }
			    System.out.println(Const.etTestCases.getRunStatus());
			    Const.oExtent.endTest(Const.etTestCases);
			   
			    Const.etScenarios.appendChild(Const.etTestCases);
				
			}
			
	    	

		Const.oExtent.endTest(Const.etScenarios);
	    }

	  }
	
	@AfterSuite
	public void CloseDriver(){

	  Const.oExtent.flush();
	  Const.driver.get(Const.JAVA_SEED_EXTENTREPORT);
	  
	}
		

}