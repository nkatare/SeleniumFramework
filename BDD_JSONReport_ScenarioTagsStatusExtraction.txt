package com.cucumber.project.CucumberProject;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.jboss.netty.util.internal.SystemPropertyUtil;
import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.omg.Messaging.SyncScopeHelper;

import cucumber.api.CucumberOptions;
import cucumber.api.junit.Cucumber;

/*@RunWith(Cucumber.class)
@CucumberOptions(
		features = "src/test/resource/"
		//,glue={"/src/test/java/"}
		,format={"pretty","html:target/html/","json:target/json/output.json"}
		,tags={"~@SelectOneWay,~@LoginPositive,~@LoginPositive1"}
		)*/

public class RunnerTest {
	@Test
	public void run() throws IOException{
		JSONArray reporJsonArray=null;
		JSONObject reportJsonObj=null;		
		List<String> JIRATCKeyPASSLIST = new ArrayList<String>();
		List<String> JIRATCKeyFAILLIST = new ArrayList<String>();
		
		  byte[] encoded = Files.readAllBytes(Paths.get("../CucumberProject/target/json/output.json"));
		  String reportJsonString = new String(encoded,"UTF-8");
			
		reporJsonArray = new JSONArray(reportJsonString);
		// Report Elements Array Loop
		for (int a=0;a<reporJsonArray.length();a++){
			reportJsonObj = new JSONObject(reporJsonArray.get(a).toString());
			@SuppressWarnings("unchecked")
			Iterator<String> repKeys = reportJsonObj.keys();
			// Get each Element loop
			while (repKeys.hasNext()) {
				String reportkey = (String) repKeys.next();			
				if(reportkey.trim().equals("elements")){
					String elementsStr=reportJsonObj.get(reportkey).toString();
					JSONArray eleJsonArray = new JSONArray(elementsStr);
					
					// Element's entity loop
					for(int i=0;i<eleJsonArray.length();i++){
						JSONObject elementJsonObj = new JSONObject(eleJsonArray.get(i).toString());
						@SuppressWarnings("unchecked")
						Iterator<String> eleKeys = elementJsonObj.keys();
						
						// Run each Key in all Element's entities
						while (eleKeys.hasNext()) {
							String elementKey = (String) eleKeys.next();
							// Run Each Scenarios (Test Case) and grab the String for Steps
							if(elementKey.trim().equals("keyword") && elementJsonObj.get(elementKey).toString().contentEquals("Scenario")){
								String stepsJsonString = elementJsonObj.get("steps").toString();
								JSONArray stepsJsonArray = new JSONArray(stepsJsonString);
								
								// Loop all elements of Steps
								String ScenarioStatus=null;
								for (int j=0;j<stepsJsonArray.length();j++){
									// Grab Results String for all Steps of the Scenario
									JSONObject stepsJsonObj = new JSONObject(stepsJsonArray.get(j).toString());
									String resultJsonString = stepsJsonObj.get("result").toString();
									JSONObject resultsJsonObj = new JSONObject(resultJsonString);
									// Grab the status of the Results of all steps, if anyone fails mark the flag as Fail else Pass 
									if(!(resultsJsonObj.get("status").toString().contentEquals("passed"))){
										ScenarioStatus="Fail";
										break;
									} else{
										ScenarioStatus="Pass";
									}									
								}
								// Read all Scenario Tags and save them in either PassList or FailList based on Flag 
								String tagsJsonString = elementJsonObj.get("tags").toString();
								JSONArray tagsJsonArray = new JSONArray(tagsJsonString);
								for(int x=0;x<tagsJsonArray.length();x++){
									JSONObject tagsJsonObj = new JSONObject(tagsJsonArray.get(x).toString());
									if(ScenarioStatus.contentEquals("Pass")){
										JIRATCKeyPASSLIST.add(tagsJsonObj.get("name").toString().substring(1));
										System.out.println("Passed:- "+tagsJsonObj.get("name").toString().substring(1));
									} else if(ScenarioStatus.contentEquals("Fail")){
										JIRATCKeyFAILLIST.add(tagsJsonObj.get("name").toString().substring(1));
										System.out.println("Failed:- "+tagsJsonObj.get("name").toString().substring(1));
									}
								}
							}
						}
					}
					
				}
			}
		}
	}

	
}
